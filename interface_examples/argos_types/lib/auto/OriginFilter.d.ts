/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type OriginFilter = OriginFilterPolygon | OriginFilterCircle;
export type OriginFilterPolygon = {
    /**
     * Unique id of the origin filter.
     */
    ofId: string;
    /**
     * Color of the origin filter. Helper property for a frontend, not used in the backend.
     */
    color?: string;
    /**
     * Name of the origin filter. Helper property for a frontend, not used in the backend.
     */
    name?: string;
    /**
     * Switch for (de)activating the origin filter.
     */
    isActive: boolean;
    /**
     * Polygon defining the origin filter.
     */
    polygon: {
        /**
         * Latitude of point in polygon.
         */
        lat: number;
        /**
         * Longitude of point in polygon.
         */
        lon: number;
    }[];
    /**
     * Optional upper vertical limit of the filter zone (meters relative to mission center height)
     */
    top?: number;
    /**
     * Optional lower vertical limit of the filter zone (meters relative to mission center height)
     */
    bottom?: number;
    /**
     * Set this to keep filtering the threat while it is within this distance (m) of the filter zone. The threat must originate inside the zone.
     */
    filterDistance?: number;
};
export type OriginFilterCircle = {
    /**
     * Unique id of the origin filter.
     */
    ofId: string;
    /**
     * Color of the origin filter. Helper property for a frontend, not used in the backend.
     */
    color?: string;
    /**
     * Name of the origin filter. Helper property for a frontend, not used in the backend.
     */
    name?: string;
    /**
     * Switch for (de)activating the origin filter.
     */
    isActive: boolean;
    /**
     * Circle defining the origin filter..
     */
    circle: {
        /**
         * Latitude of the circle center.
         */
        lat: number;
        /**
         * Longitude of the circle center.
         */
        lon: number;
        /**
         * radius of the circle in meters.
         */
        radiusInMeters: number;
    };
    /**
     * Optional upper vertical limit of the filter zone (meters relative to mission center height)
     */
    top?: number;
    /**
     * Optional lower vertical limit of the filter zone (meters relative to mission center height)
     */
    bottom?: number;
    /**
     * Set this to keep filtering the threat while it is within this distance (m) of the filter zone. The threat must originate inside the zone.
     */
    filterDistance?: number;
};

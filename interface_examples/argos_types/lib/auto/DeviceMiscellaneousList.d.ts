/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type DeviceMiscellaneousInfo = DeviceMiscellaneousDeviceName | DeviceMiscellaneousDeviceOrder | DeviceMiscellaneousDeviceOrientation | DeviceMiscellaneousProductName | DeviceMiscellaneousFrequencyBands | DeviceMiscellaneousDroneList | DeviceMiscellaneousUseGPSLocation | DeviceMiscellaneousPtzLimits | DeviceMiscellaneousDeviceRange | DeviceMiscellaneousConfidenceThreshold | DeviceMiscellaneousRingSettings | DeviceMiscellaneousAssetData;
export type DeviceMiscellaneousType = "deviceName" | "productName" | "deviceOrientation" | "deviceOrder" | "frequencyBands" | "droneList" | "useGPSLocation" | "ptzLimits" | "deviceRange" | "confidenceThreshold" | "ringSettings" | "assetData";
/**
 * Information about the frequency of an effector/detector.
 */
export type FrequencyBand = "433" | "900" | "1G2" | "2G4" | "5G2" | "5G8" | "GNSS";
export type DeviceMiscellaneousList = {
    deviceId: string;
    deviceMiscellaneousList: DeviceMiscellaneousInfo[];
};
export type DeviceMiscellaneousDeviceName = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceName";
    deviceMiscellaneousData: {
        /**
         * Name of device
         */
        deviceName: string;
    };
};
export type DeviceMiscellaneousDeviceOrder = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrder";
    deviceMiscellaneousData: {
        /**
         * The layer in which a device is shown in the frontend.
         */
        deviceOrder: number;
    };
};
export type DeviceMiscellaneousDeviceOrientation = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrientation";
    deviceMiscellaneousData: {
        /**
         * Orientation of device in degrees.
         */
        deviceOrientation: number;
    };
};
export type DeviceMiscellaneousProductName = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "productName";
    deviceMiscellaneousData: {
        /**
         * The product name of the device
         */
        productName: string;
    };
};
export type DeviceMiscellaneousFrequencyBands = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "frequencyBands";
    deviceMiscellaneousData: {
        /**
         * The frequency bands supported by the device
         */
        frequencyBands: FrequencyBand[];
        /**
         * The currently selected frequency bands
         */
        currentBands: FrequencyBand[];
        /**
         * The number of possible simultaneous frequency bands
         */
        numSimultaneusBands: number;
    };
};
export type DeviceMiscellaneousDroneList = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "droneList";
    deviceMiscellaneousData: {
        /**
         * Array of supported drone/controller systems
         */
        droneList: {
            id: number;
            vendor_name: string;
            vendor_id: number;
            type_name: string;
            type_id: number;
            category: string;
            bands: FrequencyBand[];
            drone_names: string;
        }[];
    };
};
export type DeviceMiscellaneousUseGPSLocation = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "useGPSLocation";
    deviceMiscellaneousData: {
        /**
         * Boolean value that allows the location of a device to be updated based on GPS position from the device
         */
        useGPSLocation: boolean;
    };
};
export type DeviceMiscellaneousPtzLimits = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ptzLimits";
    deviceMiscellaneousData: {
        /**
         * Maximum and minimum pan values in degrees
         */
        pan?: {
            /**
             * Minimum pan value in degrees
             */
            min?: number | null;
            /**
             * Maximum pan value in degrees
             */
            max?: number | null;
        };
        /**
         * Maximum and minimum tilt values in degrees
         */
        tilt?: {
            /**
             * Minimum tilt value in degrees
             */
            min?: number | null;
            /**
             * Maximum tilt value in degrees
             */
            max?: number | null;
        };
        /**
         * Maximum and minimum zoom values
         */
        zoom?: {
            /**
             * Maximum and minimum fov (field-of-view) values in degrees
             */
            fov: {
                /**
                 * Minimum fov (field-of-view) value in degrees
                 */
                min?: number | null;
                /**
                 * Maximum fov (field-of-view) value in degrees
                 */
                max?: number | null;
            };
        };
    };
};
export type DeviceMiscellaneousDeviceRange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceRange";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for working range. It should not be added for other devices. Legal values are between deviceRangeMin and deviceRangeMax
         */
        deviceRange: number;
        /**
         * Minimum configurable range, read-only.
         */
        deviceRangeMin?: number;
        /**
         * Maximum configurable range, read-only.
         */
        deviceRangeMax?: number;
    };
};
export type DeviceMiscellaneousConfidenceThreshold = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "confidenceThreshold";
    deviceMiscellaneousData: {
        /**
         * Detections with a drone probability below this threshold are discarded and not sent into the stack
         */
        confidenceThreshold: number;
        /**
         * The maximum possible drone probability value and thus the maximum allowed setting of confidenceThreshold. When integrating a sensor we assess the quality of its detections, and adjust the confidences sent into ARGOS correspondingly. This is reflected in the confidenceThresholdMax value. Read-only.
         */
        confidenceThresholdMax?: number;
    };
};
export type DeviceMiscellaneousRingSettings = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ringSettings";
    deviceMiscellaneousData: {
        /**
         * Range of Ring device. Mapped to TX gain setting.
         */
        range?: number;
        /**
         * Minimum range of Ring device, read-only
         */
        rangeMin?: number;
        /**
         * Maximum range of Ring device, read-only
         */
        rangeMax?: number;
        /**
         * Radius of the ring generated when activating the 'holdingPattern' interception mode
         */
        holdRadius?: number;
        /**
         * Minimum radius of the ring generated when activating the 'holdingPattern' interception mode, read-only
         */
        holdRadiusMin?: number;
        /**
         * Maximum radius of the ring generated when activating the 'holdingPattern' interception mode, read-only
         */
        holdRadiusMax?: number;
        /**
         * Name of the interception mode
         */
        mode?: "holdingPattern" | "static" | "pushBack";
        /**
         * The heading the target will be pushed when activating the 'pushBack' interception mode
         */
        pushBackHeading?: number;
        /**
         * Coordinates to use when Ring device is manually activated in either 'holdingPattern' or 'pushBack' mode. If null, the location of the Ring device is used.
         */
        targetLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Coordinates to use when Ring device is manually activated in 'static' mode. If null, the location of the Ring device is used.
         */
        staticLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Name of the interception mode when Ring device is activated by automatic ECM
         */
        autoEcmMode?: "holdingPattern" | "static";
        /**
         * Coordinates to use when Ring device is activated by automatic ECM. If null, the location of the Ring device is used.
         */
        autoEcmLocation?: {
            /**
             * Latitude used when Ring device is activated by automatic ECM
             */
            lat: number;
            /**
             * Longitude used when Ring device is activated by automatic ECM
             */
            lon: number;
            /**
             * Height relative to installation plane used when Ring device is activated by automatic ECM
             */
            height?: number;
        } | null;
    };
};
export type DeviceMiscellaneousAssetData = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "assetData";
    deviceMiscellaneousData: {
        /**
         * Various data for internal asset service. Not intended for usage by 3rd party integrators.
         */
        assetData: {
            [k: string]: unknown;
        };
    };
};

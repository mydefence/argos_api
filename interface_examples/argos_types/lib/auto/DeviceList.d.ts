/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A unique device identification, generated automatically from the system - will change if a device is removed entirely from the system and then added again
 */
export type DeviceIdentification = string;
/**
 * A unique device serialnumber either received from the device itself if autodetected, if manually created from the input received and on a composite device it's the same as the deviceId.
 */
export type DeviceSerialnumber = string;
/**
 * Defines if the device should be trying to get a connection with the physical device
 */
export type DeviceMounted = boolean;
/**
 * Defines if the system should be trying to get a connection with the physical device. 'updateable' means device is connected but inactive, e.g. and unmounted child, or obsolete FW.
 */
export type DeviceState = "created" | "connecting" | "connected" | "disconnecting" | "disconnected" | "updating" | "updateable";
/**
 * Device types tells what kind of device it is and with that what kind of attributes and abilities is available - must always be used in combination with deviceVersion and if composite with the sub/composite devices found under the devices list
 */
export type DeviceType = "blackbird" | "jaegar" | "dobermann" | "dobermann360" | "dobermann_dual" | "duo" | "echoguard" | "gps" | "groundaware" | "hepta" | "hexa" | "penta" | "pentaDM1xx" | "pentaWD2xx" | "quad" | "quadWD2xx" | "trio" | "wd200" | "wingman" | "wl1" | "wm200" | "wolfpack" | "onvif" | "skyeye" | "blackbird5k" | "echoguardQuad" | "groundawareTrio" | "aps" | "ring" | "xenta" | "echoshield" | "echoshieldQuad" | "visionflex";
/**
 * Defines the version of the individual devices and the capabilities attached to the specific device type version
 */
export type DeviceVersion = number;
/**
 * Defines some high-level categories to define if the device is an effector, detector or combination device
 */
export type DeviceCategory = "detector" | "effector" | "composite" | "detectorEffector";
/**
 * Defines some high-level categories for the capabilities of the individual device
 */
export type DeviceConcept = "area" | "direction" | "track" | "group";
/**
 * Defines if the devices is a part of a group/composite device - if a device is part of a group/composite device the value is set to true
 */
export type DeviceGroup = boolean;
/**
 * Is combined with deviceGroup - and if deviceGroup is true the deviceParentId is set to the deviceId of the group/composite device for sub/child devices
 */
export type DeviceGroupParrentId = string | null;
/**
 * Defines the devices IP address either received when the devices was discovered or when the device was manually created. A composite device does not have a device IP
 */
export type DeviceIP = string | null;
/**
 * Defines the devices MAC address either received when the devices was discovered or when the device was manually created. A composite device does not have a device MAC
 */
export type DeviceMAC = string | null;
/**
 * Current software version running in device
 */
export type DeviceSoftwareVersion = string | null;
/**
 * Defines the origin system to be either the local ARGOS instance or if from another ARGOS instance
 */
export type CreatedOrigin = "local" | "external";
/**
 * The number of sub/child devices
 */
export type DeviceCount = number;
/**
 * Defines a list of the devices in a composite devices - see composite device devices schema
 */
export type Devices = Device[];
/**
 * Determines wheather the device is created by the system or by the API (or user).
 */
export type CreatedByField = "system" | "API";
export type DeviceList = Device[];
export type Device = {
    deviceId: DeviceIdentification;
    deviceSerialNumber: DeviceSerialnumber;
    deviceMounted: DeviceMounted;
    deviceState: DeviceState;
    deviceType: DeviceType;
    deviceVersion: DeviceVersion;
    deviceCategory: DeviceCategory;
    deviceConcept: DeviceConcept;
    deviceGroup: DeviceGroup;
    deviceParentId: DeviceGroupParrentId;
    deviceIP: DeviceIP;
    deviceMac: DeviceMAC;
    deviceAttributes: DeviceAttributes;
    deviceSwVersion: DeviceSoftwareVersion;
    deviceOrigin: CreatedOrigin;
    deviceGPSHardware: boolean;
    devicesCount: DeviceCount;
    devices: Devices;
    createdBy?: CreatedByField;
};
/**
 * device attributes
 */
export type DeviceAttributes = {
    minAngle?: number;
    maxAngle?: number;
    /**
     * DEPRECATED! Will be removed. Use deviceLocationHeading from deviceLocation* messages instead.
     */
    deviceHeading?: number;
    maxAngleFallback?: number;
    noAngleFallback?: number;
};

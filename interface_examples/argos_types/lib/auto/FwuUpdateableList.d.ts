/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * A unique device identification, generated automatically from the system - will change if a device is removed entirely from the system and then added again
 */
export type DeviceIdentification = string;
/**
 * A unique device serialnumber either received from the device itself if auto-detected, if manually created from the input received and on a composite device it's the same as the deviceId.
 */
export type DeviceSerialnumber = string;
/**
 * Defines if the device should be trying to get a connection with the physical device
 */
export type DeviceMounted = boolean;
/**
 * State of the connection to the physical device. 'updateable' means device is connected but inactive, e.g. and unmounted child, or obsolete FW. "created" is DEPRECATED and will never be used
 */
export type DeviceState = "created" | "connecting" | "connected" | "disconnecting" | "disconnected" | "updating" | "updateable";
/**
 * Device types tells what kind of device it is and with that what kind of attributes and abilities is available - must always be used in combination with deviceVersion and if composite with the sub/composite devices found under the devices list
 */
export type DeviceType = "blackbird" | "jaegar" | "dobermann" | "dobermann360" | "dobermann_dual" | "duo" | "echoguard" | "gps" | "groundaware" | "hepta" | "hexa" | "penta" | "pentaDM1xx" | "pentaWD2xx" | "quad" | "quadWD2xx" | "trio" | "wd200" | "wingman" | "wl1" | "wm200" | "wolfpack" | "onvif" | "skyeye" | "blackbird5k" | "echoguardQuad" | "groundawareTrio" | "aps" | "ring" | "xenta" | "echoshield" | "echoshieldQuad" | "visionflex" | "composite" | "lizardEar" | "circleScope" | "tak";
/**
 * Defines the version of the individual devices and the capabilities attached to the specific device type version
 */
export type DeviceVersion = number;
/**
 * Defines some high-level categories to define if the device is an effector, detector or combination device
 */
export type DeviceCategory = "detector" | "effector" | "composite" | "detectorEffector";
/**
 * Defines some high-level categories for the capabilities of the individual device
 */
export type DeviceConcept = "area" | "direction" | "track" | "group";
/**
 * Defines if the device is a part of a group/composite device - if a device is part of a group/composite device the value is set to true
 */
export type DeviceGroup = boolean;
/**
 * If the device is a child in a composite device, this will be the parent device id.
 */
export type DeviceParentId = string | null;
/**
 * Defines the devices IP address either received when the devices was discovered or when the device was manually created. A composite device does not have a device IP. If a composite device has discovered some, but not all of its children, the IP in the missing children will be set to null.
 */
export type DeviceIP = string | null;
/**
 * Defines the devices MAC address either received when the devices was discovered or when the device was manually created. A composite device does not have a device MAC
 */
export type DeviceMAC = string | null;
/**
 * Current software version running in device
 */
export type DeviceSoftwareVersion = string | null;
/**
 * Defines the origin system to be either the local ARGOS instance or if from another ARGOS instance
 */
export type CreatedOrigin = "local" | "external";
/**
 * The number of sub/child devices
 */
export type DeviceCount = number;
/**
 * Defines a list of the child devices in a composite devices
 */
export type Devices = Device[];
/**
 * Indicates if the device is created by the system, by the API (user), or by some external entity.
 */
export type CreatedByField = "system" | "API" | "extern";
/**
 * Current calibration state. 'recalibrate' indicates that the device is calibrated but needs to be recalibrated. Note: 'failed' is overwritten on next update.
 */
export type CalibrationState = "uncalibrated" | "calibrating" | "calibrated" | "recalibrate" | "failed";
export type FwuUpdateableList = Device[];
export type Device = {
    deviceId: DeviceIdentification;
    deviceSerialNumber: DeviceSerialnumber;
    deviceMounted: DeviceMounted;
    deviceState: DeviceState;
    deviceType: DeviceType;
    deviceVersion: DeviceVersion;
    deviceCategory: DeviceCategory;
    deviceConcept: DeviceConcept;
    deviceGroup: DeviceGroup;
    deviceParentId: DeviceParentId;
    deviceIP: DeviceIP;
    deviceMac: DeviceMAC;
    deviceAttributes: DeviceAttributes;
    deviceSwVersion: DeviceSoftwareVersion;
    deviceOrigin: CreatedOrigin;
    deviceGPSHardware: boolean;
    devicesCount: DeviceCount;
    devices: Devices;
    createdBy: CreatedByField;
    deviceCalibration?: DeviceCalibration;
};
/**
 * device attributes
 */
export type DeviceAttributes = {
    maxAngle?: number;
    /**
     * Set for child devices and indicates the child's heading relative to the parent composite device. This is a mirror of deviceLocationHeading from deviceLocation* messages. Use deviceLocationChange to change it.
     */
    deviceHeading?: number;
};
/**
 * If present, it indicates that the device supports calibration, which may be initiated with `deviceCalibrationStart`. For composite devices this property can only be present in child devices. The property name indicates the calibration type, which must be used in `deviceCalibrationStart`.
 */
export type DeviceCalibration = {
    compass?: CalibrationState;
};

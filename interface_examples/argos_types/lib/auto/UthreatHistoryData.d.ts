/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type Uthreat = UthreatPresence | UthreatZone | UthreatDirection | UthreatLocation;
/**
 * Information about the frequency of an effector/detector.
 */
export type FrequencyBand = "433" | "900" | "1G2" | "2G4" | "5G2" | "5G8" | "GNSS";
export type UthreatBasis = UthreatBasisPresence | UthreatBasisZone | UthreatBasisDirection | UthreatBasisLocation;
/**
 * The type of the system component sending the threat.
 */
export type DetectionType = "RF" | "Radar" | "Drone ID" | "Demodulated";
/**
 * The type of the system component sending the threat.
 */
export type DetectionType1 = "RF" | "Radar" | "Drone ID" | "Demodulated";
/**
 * The type of the system component sending the threat.
 */
export type DetectionType2 = "RF" | "Radar" | "Drone ID" | "Demodulated";
/**
 * The type of the system component sending the threat.
 */
export type DetectionType3 = "RF" | "Radar" | "Drone ID" | "Demodulated";
export type UthreatHistoryData = {
    /**
     * List of uthreats for the given set of uthreatIds.
     */
    historyData: Uthreat[];
    /**
     * True if the request result has been limited. If true more data for the given set of uthreatIds exists. To get the remaining data send a new request with the same uthreatIds and set the optional fromTimestamp to the toTimestamp from this reponse.
     */
    limited: boolean;
    timeInterval: TimeInterval;
};
export type UthreatPresence = {
    /**
     * The unique ID of the uthreat from the system.
     */
    uthreatId: string;
    /**
     * True if uthreat has been muted.
     */
    muted: boolean;
    /**
     * Used to link controller and drone.
     */
    associatedUthreatId?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    presence: {
        /**
         * Latitude of the origo of the presence detection of the threat (geographical coordinate).
         */
        lat: number;
        /**
         * Longitude of the origo of the presence detection of the threat (geographical coordinate).
         */
        lon: number;
        /**
         * East/west relative to mission center of the origo of the presence detection of the threat (cartesian coordinate) [m].
         */
        x: number;
        /**
         * North/south relative to mission center of the origo of the presence detection of the threat  (cartesian coordinate) [m].
         */
        y: number;
        /**
         * Height above/under mission center of the origo of the presence detection of the threat  (cartesian coordinate) [m].
         */
        z: number;
    }[];
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Collection of threat detections related to this uthreat
     */
    uthreatBasis: UthreatBasis[];
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatBasisPresence = {
    /**
     * True if uthreat has been muted.
     */
    muted?: boolean;
    /**
     * The unique ID of the threat from a system component.
     */
    threatId: string;
    /**
     * Used to link controller and drone.
     */
    associatedThreatId?: string;
    /**
     * Physical MAC address of emitter if known, e.g. WiFi emitters. Lowercase string of hex characters (no `:`).
     */
    macAddress?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * The unique ID of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceId: string;
    /**
     * The serial number of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceSerialNumber: string;
    detectionType: DetectionType;
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description?: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    /**
     * Presence of a threat detection.
     */
    presence: {
        /**
         * Latitude of the origo of the presence detection of the threat (geographical coordinate).
         */
        lat: number;
        /**
         * Longitude of the origo of the presence detection of the threat (geographical coordinate).
         */
        lon: number;
        /**
         * East/west relative to mission center of the origo of the presence detection of the threat (cartesian coordinate) [m].
         */
        x: number;
        /**
         * North/south relative to mission center of the origo of the presence detection of the threat  (cartesian coordinate) [m].
         */
        y: number;
        /**
         * Height above/under mission center of the origo of the presence detection of the threat  (cartesian coordinate) [m].
         */
        z: number;
    };
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
        /**
         * Detected power [dB].
         */
        power: number;
        /**
         * Unique ID of the RF source
         */
        rfEmitterId?: string;
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Threat type ID will be set for RF threats. Can be used in a threatTypeMute request.
     */
    threatType?: number;
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatBasisZone = {
    /**
     * True if uthreat has been muted.
     */
    muted?: boolean;
    /**
     * The unique ID of the threat from a system component.
     */
    threatId: string;
    /**
     * Used to link controller and drone.
     */
    associatedThreatId?: string;
    /**
     * Physical MAC address of emitter if known, e.g. WiFi emitters. Lowercase string of hex characters (no `:`).
     */
    macAddress?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * The unique ID of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceId: string;
    /**
     * The serial number of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceSerialNumber: string;
    detectionType: DetectionType1;
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description?: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    /**
     * Zone of the threat detection.
     */
    zone: {
        /**
         * Azimuth - Angle relative to true North. 0 deg is North and 90 deg is east [deg].
         */
        az: number;
        /**
         * Opening around 'az' [deg].
         */
        opening: number;
        origin: {
            /**
             * Latitude of the origo of the zone of the threat detection (geographical coordinate).
             */
            lat: number;
            /**
             * Longitude of the origo of the zone of the threat detection (geographical coordinate).
             */
            lon: number;
            /**
             * East/west relative to mission center of the origo of the zone of the threat detection (cartesian coordinate) [m].
             */
            x: number;
            /**
             * North/south relative to mission center of the origo of the zone of the threat detection  (cartesian coordinate) [m].
             */
            y: number;
            /**
             * Height above/under mission center of the origo of the zone of the threat detection  (cartesian coordinate) [m].
             */
            z: number;
        };
    };
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
        /**
         * Detected power [dB].
         */
        power: number;
        /**
         * Unique ID of the RF source
         */
        rfEmitterId?: string;
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Threat type ID will be set for RF threats. Can be used in a threatTypeMute request.
     */
    threatType?: number;
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatBasisDirection = {
    /**
     * True if uthreat has been muted.
     */
    muted?: boolean;
    /**
     * The unique ID of the threat from a system component.
     */
    threatId: string;
    /**
     * Used to link controller and drone.
     */
    associatedThreatId?: string;
    /**
     * Physical MAC address of emitter if known, e.g. WiFi emitters. Lowercase string of hex characters (no `:`).
     */
    macAddress?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * The unique ID of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceId: string;
    /**
     * The serial number of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceSerialNumber: string;
    detectionType: DetectionType2;
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description?: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    /**
     * Direction to the threat.
     */
    direction: {
        /**
         * Azimuth - Angle relative to true North. 0 deg is North and 90 deg is east [deg].
         */
        az: number;
        /**
         * Variance of azimuth [deg^2]
         */
        varAz: number;
        /**
         * Elevation - Angle relative to horizon. 0 deg is the horizon and 90 deg is straight up [deg].
         */
        el?: number;
        /**
         * Variance of elevation [deg^2]
         */
        varEl?: number;
        origin: {
            /**
             * Latitude of the origo of the direction to the threat (geographical coordinate).
             */
            lat: number;
            /**
             * Longitude of the origo of the direction to the threat (geographical coordinate).
             */
            lon: number;
            /**
             * East/west relative to mission center of the origo of the direction to the threat (cartesian coordinate) [m].
             */
            x: number;
            /**
             * North/south relative to mission center of the origo of the direction to the threat  (cartesian coordinate) [m].
             */
            y: number;
            /**
             * Height above/under mission center of the origo of the direction to the threat  (cartesian coordinate) [m].
             */
            z: number;
        };
    };
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
        /**
         * Detected power [dB].
         */
        power: number;
        /**
         * Unique ID of the RF source
         */
        rfEmitterId?: string;
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Threat type ID will be set for RF threats. Can be used in a threatTypeMute request.
     */
    threatType?: number;
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatBasisLocation = {
    /**
     * True if uthreat has been muted.
     */
    muted?: boolean;
    /**
     * The unique ID of the threat from a system component.
     */
    threatId: string;
    /**
     * Used to link controller and drone.
     */
    associatedThreatId?: string;
    /**
     * Physical MAC address of emitter if known, e.g. WiFi emitters. Lowercase string of hex characters (no `:`).
     */
    macAddress?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * The unique ID of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceId: string;
    /**
     * The serial number of the system component sending the threat. For composite devices it is either child or parent device ID.
     */
    deviceSerialNumber: string;
    detectionType: DetectionType3;
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description?: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    /**
     * Location of the threat.
     */
    location: {
        /**
         * Latitude of the threat (geographical coordinate).
         */
        lat: number;
        /**
         * Longitude of the threat (geographical coordinate).
         */
        lon: number;
        /**
         * East/west relative to mission center (cartesian coordinate) [m].
         */
        x: number;
        /**
         * North/south relative to mission center (cartesian coordinate) [m].
         */
        y: number;
        /**
         * Height above/under mission center (cartesian coordinate) [m].
         */
        z?: number;
        /**
         * Covariance parameters. Defines the uncertainty of the location.
         */
        cov: {
            /**
             * xx element of the covariance matrix [m^2].
             */
            xx: number;
            /**
             * xy element of the covariance matrix [m^2].
             */
            xy: number;
            /**
             * xz element of the covariance matrix [m^2].
             */
            xz?: number;
            /**
             * yy element of the covariance matrix [m^2].
             */
            yy: number;
            /**
             * yz element of the covariance matrix [m^2].
             */
            yz?: number;
            /**
             * zz element of the covariance matrix [m^2].
             */
            zz?: number;
        };
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Threat type ID will be set for RF threats. Can be used in a threatTypeMute request.
     */
    threatType?: number;
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatZone = {
    /**
     * The unique ID of the uthreat from the system.
     */
    uthreatId: string;
    /**
     * True if uthreat has been muted.
     */
    muted: boolean;
    /**
     * Used to link controller and drone.
     */
    associatedUthreatId?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    zone: {
        /**
         * Azimuth - Angle relative to true North. 0 deg is North and 90 deg is east [deg].
         */
        az: number;
        /**
         * Opening around 'az' [deg].
         */
        opening: number;
        origin: {
            /**
             * Latitude of the origo of the zone of the threat detection (geographical coordinate).
             */
            lat: number;
            /**
             * Longitude of the origo of the zone of the threat detection (geographical coordinate).
             */
            lon: number;
            /**
             * East/west relative to mission center of the origo of the zone of the threat detection (cartesian coordinate) [m].
             */
            x: number;
            /**
             * North/south relative to mission center of the origo of the zone of the threat detection  (cartesian coordinate) [m].
             */
            y: number;
            /**
             * Height above/under mission center of the origo of the zone of the threat detection  (cartesian coordinate) [m].
             */
            z: number;
        };
    }[];
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Collection of threat detections related to this uthreat
     */
    uthreatBasis: UthreatBasis[];
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatDirection = {
    /**
     * The unique ID of the uthreat from the system.
     */
    uthreatId: string;
    /**
     * True if uthreat has been muted.
     */
    muted: boolean;
    /**
     * Used to link controller and drone.
     */
    associatedUthreatId?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    direction: {
        /**
         * Azimuth - Angle relative to true North. 0 deg is North and 90 deg is east [deg].
         */
        az: number;
        /**
         * Variance of azimuth [deg^2]
         */
        varAz: number;
        /**
         * Elevation - Angle relative to horizon. 0 deg is the horizon and 90 deg is straight up [deg].
         */
        el?: number;
        /**
         * Variance of elevation [deg^2]
         */
        varEl?: number;
        origin: {
            /**
             * Latitude of the origo of the direction to the threat (geographical coordinate).
             */
            lat: number;
            /**
             * Longitude of the origo of the direction to the threat (geographical coordinate).
             */
            lon: number;
            /**
             * East/west relative to mission center of the origo of the direction to the threat (cartesian coordinate) [m].
             */
            x: number;
            /**
             * North/south relative to mission center of the origo of the direction to the threat  (cartesian coordinate) [m].
             */
            y: number;
            /**
             * Height above/under mission center of the origo of the direction to the threat  (cartesian coordinate) [m].
             */
            z: number;
        };
    }[];
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Collection of threat detections related to this uthreat
     */
    uthreatBasis: UthreatBasis[];
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
export type UthreatLocation = {
    /**
     * The unique ID of the uthreat from the system.
     */
    uthreatId: string;
    /**
     * True if uthreat has been muted.
     */
    muted: boolean;
    /**
     * Used to link controller and drone.
     */
    associatedUthreatId?: string;
    /**
     * Status of UAV if advertised.
     */
    operationalStatus?: "Ground" | "Airborne" | "Emergency";
    /**
     * Information about the threat. E.g. the manufacturer of the drone causing the threat.
     */
    description: string;
    /**
     * The threat category.
     */
    category: "drone" | "controller" | "drone/controller" | "wifi" | "test";
    /**
     * Location of the threat.
     */
    location: {
        /**
         * Latitude of the threat (geographical coordinate).
         */
        lat: number;
        /**
         * Longitude of the threat (geographical coordinate).
         */
        lon: number;
        /**
         * East/west relative to mission center (cartesian coordinate) [m].
         */
        x: number;
        /**
         * North/south relative to mission center (cartesian coordinate) [m].
         */
        y: number;
        /**
         * Height above/under mission center (cartesian coordinate) [m].
         */
        z?: number;
        /**
         * Covariance parameters. Defines the uncertainty of the location.
         */
        cov: {
            /**
             * xx element of the covariance matrix [m^2].
             */
            xx: number;
            /**
             * xy element of the covariance matrix [m^2].
             */
            xy: number;
            /**
             * xz element of the covariance matrix [m^2].
             */
            xz?: number;
            /**
             * yy element of the covariance matrix [m^2].
             */
            yy: number;
            /**
             * yz element of the covariance matrix [m^2].
             */
            yz?: number;
            /**
             * zz element of the covariance matrix [m^2].
             */
            zz?: number;
        };
    };
    /**
     * Collection of RF information of the threat
     */
    rfInfo?: {
        /**
         * The current frequency bands of the threat.
         */
        frequencyBands: FrequencyBand[];
        /**
         * The possible frequency bands of the threat. This may contain more frequencies than 'frequencyBands' for threats, that are known to use multiple frequency bands.
         */
        possibleBands: FrequencyBand[];
    };
    /**
     * Confidence in the detection, in 0.0 .. 1.0 .
     */
    confidence: number;
    /**
     * Collection of threat detections related to this uthreat
     */
    uthreatBasis: UthreatBasis[];
    /**
     * UTC time of creation of this uthreat.
     */
    createdTimeStamp: string;
    /**
     * UTC time of the last update of this uthreat. For a new threat this will be equal to createdTimeStamp. Stopping a threat counts as an update, and will update this time stamp.
     */
    updatedTimeStamp: string;
    /**
     * UTC time of stop of this uthreat. Only set when threat is stopped. Will be equal to updatedTimeStamp.
     */
    stoppedTimeStamp?: string;
};
/**
 * Time interval for the returned data set. If 'limited' is true this time interval is narrower than that of the requested uthreatIds.
 */
export type TimeInterval = {
    fromTimestamp: string;
    toTimestamp: string;
};

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type DeviceMiscellaneousChange = DeviceMiscellaneousConfidenceThresholdChange | DeviceMiscellaneousDeviceNameChange | DeviceMiscellaneousDeviceOrderChange | DeviceMiscellaneousDeviceOrientationChange | DeviceMiscellaneousDeviceRangeChange | DeviceMiscellaneousFrequencyBandsChange | DeviceMiscellaneousNominalTargetSizeChange | DeviceMiscellaneousProductNameChange | DeviceMiscellaneousProfilesChange | DeviceMiscellaneousPtzDefaultDistanceChange | DeviceMiscellaneousPtzDefaultHeightChange | DeviceMiscellaneousPtzLimitsChange | DeviceMiscellaneousRingSettingsChange | DeviceMiscellaneousTakInfoChange | DeviceMiscellaneousUseGPSLocationChange;
export type DeviceMiscellaneousType = "deviceName" | "productName" | "deviceOrientation" | "deviceOrder" | "frequencyBands" | "droneList" | "useGPSLocation" | "ptzLimits" | "deviceRange" | "confidenceThreshold" | "ringSettings" | "assetData" | "profiles" | "takInfo" | "ptzDefaultDistance" | "ptzDefaultHeight" | "nominalTargetSize";
/**
 * Information about the frequency of an effector/detector.
 */
export type FrequencyBand = "433" | "900" | "1G2" | "2G4" | "5G2" | "5G8" | "GNSS";
export type DeviceMiscellaneousConfidenceThresholdChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "confidenceThreshold";
    deviceMiscellaneousData: {
        /**
         * Detections with a drone probability below this threshold are discarded and not sent into the stack
         */
        confidenceThreshold?: number;
    };
};
export type DeviceMiscellaneousDeviceNameChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceName";
    deviceMiscellaneousData: {
        /**
         * Name of device
         */
        deviceName?: string;
    };
};
export type DeviceMiscellaneousDeviceOrderChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrder";
    deviceMiscellaneousData: {
        /**
         * The layer in which a device is shown in the frontend.
         */
        deviceOrder?: number;
    };
};
export type DeviceMiscellaneousDeviceOrientationChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrientation";
    deviceMiscellaneousData: {
        /**
         * Orientation of device in degrees.
         */
        deviceOrientation?: number;
    };
};
export type DeviceMiscellaneousDeviceRangeChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceRange";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for working range. It should not be added for other devices. Legal values are between deviceRangeMin and deviceRangeMax
         */
        deviceRange?: number;
    };
};
export type DeviceMiscellaneousFrequencyBandsChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "frequencyBands";
    deviceMiscellaneousData: {
        /**
         * The currently selected frequency bands. Set this to change the ECM frequency bands. List must contain between 1 and `numSimultaneusBands` values taken from `frequencyBands`
         */
        currentBands?: FrequencyBand[];
    };
};
export type DeviceMiscellaneousNominalTargetSizeChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "nominalTargetSize";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for nominal target size in meters. Used to adjust field-of-view when cueing to a target.
         */
        nominalTargetSize?: number;
    };
};
export type DeviceMiscellaneousProductNameChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "productName";
    deviceMiscellaneousData: {
        /**
         * The product name of the device
         */
        productName?: string;
    };
};
export type DeviceMiscellaneousProfilesChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "profiles";
    deviceMiscellaneousData: {
        /**
         * The index (in `profileGroup.profiles`) of the active/wanted profile.
         */
        profileIndex?: number;
    };
};
export type DeviceMiscellaneousPtzDefaultDistanceChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ptzDefaultDistance";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for PTZ default distance in meters. Used when cueing where a full 3D location of the target is not available.
         */
        ptzDefaultDistance?: number;
    };
};
export type DeviceMiscellaneousPtzDefaultHeightChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ptzDefaultHeight";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for PTZ default height in meters. The value is relative to the chosen reference. Used when turning/cueing where a full 3D location of the target is not available.
         */
        ptzDefaultHeight?: number;
    };
};
export type DeviceMiscellaneousPtzLimitsChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ptzLimits";
    deviceMiscellaneousData: {
        /**
         * Maximum and minimum pan values in degrees
         */
        pan?: {
            /**
             * Minimum pan value in degrees
             */
            min?: number | null;
            /**
             * Maximum pan value in degrees
             */
            max?: number | null;
        };
        /**
         * Maximum and minimum tilt values in degrees
         */
        tilt?: {
            /**
             * Minimum tilt value in degrees
             */
            min?: number | null;
            /**
             * Maximum tilt value in degrees
             */
            max?: number | null;
        };
    };
};
export type DeviceMiscellaneousRingSettingsChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ringSettings";
    deviceMiscellaneousData: {
        /**
         * Range of Ring device. Mapped to TX gain setting.
         */
        range?: number;
        /**
         * Radius of the ring generated when activating the 'holdingPattern' interception mode
         */
        holdRadius?: number;
        /**
         * Name of the interception mode
         */
        mode?: "holdingPattern" | "static" | "pushBack";
        /**
         * The heading the target will be pushed when activating the 'pushBack' interception mode
         */
        pushBackHeading?: number;
        /**
         * Coordinates to use when Ring device is manually activated in either 'holdingPattern' or 'pushBack' mode. If null, the location of the Ring device is used.
         */
        targetLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Coordinates to use when Ring device is manually activated in 'static' mode. If null, the location of the Ring device is used.
         */
        staticLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Name of the interception mode when Ring device is activated by automatic ECM
         */
        autoEcmMode?: "holdingPattern" | "static";
        /**
         * Coordinates to use when Ring device is activated by automatic ECM. If null, the location of the Ring device is used.
         */
        autoEcmLocation?: {
            /**
             * Latitude used when Ring device is activated by automatic ECM
             */
            lat: number;
            /**
             * Longitude used when Ring device is activated by automatic ECM
             */
            lon: number;
            /**
             * Height relative to installation plane used when Ring device is activated by automatic ECM
             */
            height?: number;
        } | null;
    };
};
/**
 * The device miscellaneous data for (A)TAK devices provides additional information about the TAK user. Note that the callsign can be found in deviceMiscellaneous type "deviceName". All fields should be considered read-only.
 */
export type DeviceMiscellaneousTakInfoChange = {
    /**
     * The device ID of the TAK device
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "takInfo";
    deviceMiscellaneousData: {
        /**
         * The team of the TAK user. Typically a color.
         */
        team?: string;
        /**
         * The role of the TAK user, e.g. "Team Member".
         */
        role?: string;
        /**
         * The type of the TAK user. Format is according to CoT standard, e.g. "a-f-G-U-C".
         */
        typeCot?: string;
        /**
         * The type of the TAK user. Human readable version of typeCot.
         */
        typeStr?: string;
    };
};
export type DeviceMiscellaneousUseGPSLocationChange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "useGPSLocation";
    deviceMiscellaneousData: {
        /**
         * Boolean value that allows the location of a device to be updated based on GPS position from the device
         */
        useGPSLocation?: boolean;
    };
};

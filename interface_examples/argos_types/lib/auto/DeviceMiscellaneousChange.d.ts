/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type DeviceMiscellaneousChange = DeviceMiscellaneousConfidenceThreshold | DeviceMiscellaneousDeviceName | DeviceMiscellaneousDeviceOrder | DeviceMiscellaneousDeviceOrientation | DeviceMiscellaneousDeviceRange | DeviceMiscellaneousFrequencyBands | DeviceMiscellaneousProductName | DeviceMiscellaneousProfiles | DeviceMiscellaneousPtzLimits | DeviceMiscellaneousRingSettings | DeviceMiscellaneousUseGPSLocation;
export type DeviceMiscellaneousType = "deviceName" | "productName" | "deviceOrientation" | "deviceOrder" | "frequencyBands" | "droneList" | "useGPSLocation" | "ptzLimits" | "deviceRange" | "confidenceThreshold" | "ringSettings" | "assetData" | "profiles";
/**
 * Information about the frequency of an effector/detector.
 */
export type FrequencyBand = "433" | "900" | "1G2" | "2G4" | "5G2" | "5G8" | "GNSS";
export type DeviceMiscellaneousConfidenceThreshold = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "confidenceThreshold";
    deviceMiscellaneousData: {
        /**
         * Detections with a drone probability below this threshold are discarded and not sent into the stack
         */
        confidenceThreshold?: number;
    };
};
export type DeviceMiscellaneousDeviceName = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceName";
    deviceMiscellaneousData: {
        /**
         * Name of device
         */
        deviceName?: string;
    };
};
export type DeviceMiscellaneousDeviceOrder = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrder";
    deviceMiscellaneousData: {
        /**
         * The layer in which a device is shown in the frontend.
         */
        deviceOrder?: number;
    };
};
export type DeviceMiscellaneousDeviceOrientation = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceOrientation";
    deviceMiscellaneousData: {
        /**
         * Orientation of device in degrees.
         */
        deviceOrientation?: number;
    };
};
export type DeviceMiscellaneousDeviceRange = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "deviceRange";
    deviceMiscellaneousData: {
        /**
         * If this miscellaneous data is present, the device may be configured for working range. It should not be added for other devices. Legal values are between deviceRangeMin and deviceRangeMax
         */
        deviceRange?: number;
    };
};
export type DeviceMiscellaneousFrequencyBands = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "frequencyBands";
    deviceMiscellaneousData: {
        /**
         * The currently selected frequency bands. Set this to change the ECM frequency bands. List must contain between 1 and `numSimultaneusBands` values taken from `frequencyBands`
         */
        currentBands?: FrequencyBand[];
    };
};
export type DeviceMiscellaneousProductName = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "productName";
    deviceMiscellaneousData: {
        /**
         * The product name of the device
         */
        productName?: string;
    };
};
export type DeviceMiscellaneousProfiles = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "profiles";
    deviceMiscellaneousData: {
        /**
         * The index (in `profileGroup.profiles`) of the active/wanted profile.
         */
        profileIndex?: number;
    };
};
export type DeviceMiscellaneousPtzLimits = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ptzLimits";
    deviceMiscellaneousData: {
        /**
         * Maximum and minimum pan values in degrees
         */
        pan?: {
            /**
             * Minimum pan value in degrees
             */
            min?: number | null;
            /**
             * Maximum pan value in degrees
             */
            max?: number | null;
        };
        /**
         * Maximum and minimum tilt values in degrees
         */
        tilt?: {
            /**
             * Minimum tilt value in degrees
             */
            min?: number | null;
            /**
             * Maximum tilt value in degrees
             */
            max?: number | null;
        };
    };
};
export type DeviceMiscellaneousRingSettings = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "ringSettings";
    deviceMiscellaneousData: {
        /**
         * Range of Ring device. Mapped to TX gain setting.
         */
        range?: number;
        /**
         * Radius of the ring generated when activating the 'holdingPattern' interception mode
         */
        holdRadius?: number;
        /**
         * Name of the interception mode
         */
        mode?: "holdingPattern" | "static" | "pushBack";
        /**
         * The heading the target will be pushed when activating the 'pushBack' interception mode
         */
        pushBackHeading?: number;
        /**
         * Coordinates to use when Ring device is manually activated in either 'holdingPattern' or 'pushBack' mode. If null, the location of the Ring device is used.
         */
        targetLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Coordinates to use when Ring device is manually activated in 'static' mode. If null, the location of the Ring device is used.
         */
        staticLocation?: {
            /**
             * Latitude used in the activated interception mode
             */
            lat: number;
            /**
             * Longitude used in the activated interception mode
             */
            lon: number;
            /**
             * Height relative to installation plane used in the activated interception mode
             */
            height?: number;
        } | null;
        /**
         * Name of the interception mode when Ring device is activated by automatic ECM
         */
        autoEcmMode?: "holdingPattern" | "static";
        /**
         * Coordinates to use when Ring device is activated by automatic ECM. If null, the location of the Ring device is used.
         */
        autoEcmLocation?: {
            /**
             * Latitude used when Ring device is activated by automatic ECM
             */
            lat: number;
            /**
             * Longitude used when Ring device is activated by automatic ECM
             */
            lon: number;
            /**
             * Height relative to installation plane used when Ring device is activated by automatic ECM
             */
            height?: number;
        } | null;
    };
};
export type DeviceMiscellaneousUseGPSLocation = {
    /**
     * The device id
     */
    deviceId: string;
    deviceMiscellaneousType: DeviceMiscellaneousType & "useGPSLocation";
    deviceMiscellaneousData: {
        /**
         * Boolean value that allows the location of a device to be updated based on GPS position from the device
         */
        useGPSLocation?: boolean;
    };
};

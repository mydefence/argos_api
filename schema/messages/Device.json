{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Device",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "deviceId": {
            "type": "string",
            "title": "Device identification",
            "description": "A unique device identification, generated automatically from the system - will change if a device is removed entirely from the system and then added again"
        },
        "deviceSerialNumber": {
            "type": "string",
            "title": "Device serialnumber",
            "description": "A unique device serialnumber either received from the device itself if auto-detected, if manually created from the input received and on a composite device it's the same as the deviceId."
        },
        "deviceMounted": {
            "type": "boolean",
            "title": "Device mounted",
            "description": "Defines if the device should be trying to get a connection with the physical device"
        },
        "deviceState": {
            "type": "string",
            "title": "Device state",
            "description": "State of the connection to the physical device. 'updateable' means device is connected but inactive, e.g. and unmounted child, or obsolete FW. \"created\" is DEPRECATED and will never be used",
            "enum": ["created", "connecting", "connected", "disconnecting", "disconnected", "updating", "updateable"]
        },
        "deviceType": {
            "$ref": "./common/DeviceType.json"
        },
        "deviceVersion": {
            "type": "integer",
            "title": "Device version",
            "description": "Defines the version of the individual devices and the capabilities attached to the specific device type version"
        },
        "deviceCategory": {
            "type": "string",
            "title": "Device Category",
            "description": "Defines some high-level categories to define if the device is an effector, detector or combination device",
            "enum": ["detector", "effector", "composite", "detectorEffector"]
        },
        "deviceConcept": {
            "type": "string",
            "title": "Device concept",
            "description": "Defines some high-level categories for the capabilities of the individual device",
            "enum": ["area", "direction", "track", "group"]
        },
        "deviceGroup": {
            "type": "boolean",
            "title": "Device group",
            "description": "Defines if the device is a part of a group/composite device - if a device is part of a group/composite device the value is set to true"
        },
        "deviceParentId": {
            "type": ["string", "null"],
            "title": "Device parent id",
            "description": "If the device is a child in a composite device, this will be the parent device id."
        },
        "deviceIP": {
            "type": ["string", "null"],
            "title": "Device IP",
            "description": "Defines the devices IP address either received when the devices was discovered or when the device was manually created. A composite device does not have a device IP. If a composite device has discovered some, but not all of its children, the IP in the missing children will be set to null."
        },
        "deviceMac": {
            "type": ["string", "null"],
            "title": "Device MAC",
            "description": "Defines the devices MAC address either received when the devices was discovered or when the device was manually created. A composite device does not have a device MAC"
        },
        "deviceAttributes": {
            "title": "Device Attributes",
            "description": "device attributes",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "maxAngle": {
                    "type": "integer"
                },
                "deviceHeading": {
                    "type": "number",
                    "description": "Set for child devices and indicates the child's heading relative to the parent composite device. This is a mirror of deviceLocationHeading from deviceLocation* messages. Use deviceLocationChange to change it."
                }
            }
        },
        "deviceSwVersion": {
            "title": "Device software version",
            "description": "Current software version running in device",
            "type": ["string", "null"]
        },
        "deviceOrigin": {
            "type": "string",
            "title": "Created Origin",
            "description": "Defines the origin system to be either the local ARGOS instance or if from another ARGOS instance",
            "enum": ["local", "external"]
        },
        "deviceGPSHardware": {
            "type": "boolean"
        },
        "devicesCount": {
            "type": "integer",
            "title": "Device count",
            "description": "The number of sub/child devices"
        },
        "devices": {
            "type": "array",
            "title": "Devices",
            "description": "Defines a list of the child devices in a composite devices",
            "items": {
                "$ref": "#"
            }
        },
        "createdBy": {
            "type": ["string"],
            "title": "Created by field",
            "description": "Indicates if the device is created by the system, by the API (user), or by some external entity.",
            "enum": ["system", "API", "extern"]
        },
        "deviceCalibration": {
            "title": "Device Calibration",
            "description": "If present, it indicates that the device supports calibration, which may be initiated with `deviceCalibrationStart`. For composite devices this property can only be present in child devices. The property name indicates the calibration type, which must be used in `deviceCalibrationStart`.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "compass": { "$ref": "#/$defs/deviceCalibration" }
            }
        }
    },
    "$defs": {
        "deviceCalibration": {
            "title": "Calibration state",
            "description": "Current calibration state. 'recalibrate' indicates that the device is calibrated but needs to be recalibrated. Note: 'failed' is overwritten on next update.",
            "type": ["string"],
            "enum": ["uncalibrated", "calibrating", "calibrated", "recalibrate", "failed"]
        }
    },
    "required": [
        "deviceId",
        "deviceSerialNumber",
        "deviceMounted",
        "deviceState",
        "deviceType",
        "deviceVersion",
        "deviceCategory",
        "deviceConcept",
        "deviceGroup",
        "deviceParentId",
        "deviceIP",
        "deviceMac",
        "deviceAttributes",
        "deviceOrigin",
        "deviceGPSHardware",
        "devicesCount",
        "devices",
        "deviceSwVersion",
        "createdBy"
    ]
}
